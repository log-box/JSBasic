alert('Задание первого урока')
var user_input = prompt('Введите температуру в градусах по Цельсию (по умолчанию - 0)', 0);
user_input = parseFloat(user_input)
alert(`Введеная температура по Цельсию ${user_input} в Фарингейтах будет равна ${Tf = (9 / 5) * user_input + 32}`)

var admin = '';
var _name = 'Василий';
admin = _name;
alert(admin);
message = 1000 + "108";
document.writeln('1000 + "108" выводит:');
document.writeln(message);
alert('Информация по атрибутам скрипта defer и async в комментариях кода программы')

// defer

// Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда он загрузится.

// Вот тот же пример, что и выше, но с defer:

// <p>...содержимое перед скриптом...</p>

// <script defer src="https://javascript.info/article/script-async-defer/long.js?speed=1"></script>

// <!-- отображается сразу же -->
// <p>...содержимое после скрипта...</p>

//     Скрипты с defer никогда не блокируют страницу.
//     Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.

// Следующий пример это показывает:

// <p>...содержимое до скрипта...</p>

// <script>
//   document.addEventListener('DOMContentLoaded', () => alert("Дерево DOM готово после скрипта с 'defer'!")); // (2)
// </script>

// <script defer src="https://javascript.info/article/script-async-defer/long.js?speed=1"></script>

// <p>...содержимое после скрипта...</p>

//     Содержимое страницы отобразится мгновенно.
//     Событие DOMContentLoaded подождёт отложенный скрипт. Оно будет сгенерировано, только когда скрипт (2) будет загружен и выполнен.

// Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.

// Поэтому, если сначала загружается большой скрипт, а затем меньшего размера, то последний будет ждать.

// <script defer src="https://javascript.info/article/script-async-defer/long.js"></script>
// <script defer src="https://javascript.info/article/script-async-defer/small.js"></script>

// Маленький скрипт загрузится первым, но выполнится вторым

// Браузеры сканируют страницу на предмет скриптов и загружают их параллельно в целях увеличения производительности. Поэтому и в примере выше оба скрипта скачиваются параллельно. small.js скорее всего загрузится первым.

// Но спецификация требует последовательного выполнения скриптов согласно порядку в документе, поэтому он подождёт выполнения long.js.
// Атрибут defer предназначен только для внешних скриптов

// Атрибут defer будет проигнорирован, если в теге <script> нет src.

// async

// Атрибут async означает, что скрипт абсолютно независим:

//     Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
//     Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
//         DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова),
//         …так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше)
//     Остальные скрипты не ждут async, и скрипты casync не ждут другие скрипты.

// Так что если у нас есть несколько скриптов с async, они могут выполняться в любом порядке. То, что первое загрузится – запустится в первую очередь:

// <p>...содержимое перед скриптами...</p>

// <script>
//   document.addEventListener('DOMContentLoaded', () => alert("DOM готов!"));
// </script>

// <script async src="https://javascript.info/article/script-async-defer/long.js"></script>
// <script async src="https://javascript.info/article/script-async-defer/small.js"></script>

// <p>...содержимое после скриптов...</p>

//     Содержимое страницы отображается сразу же : async его не блокирует.
//     DOMContentLoaded может произойти как до, так и после async, никаких гарантий нет.
//     Асинхронные скрипты не ждут друг друга. Меньший скрипт small.js идёт вторым, но скорее всего загрузится раньше long.js, поэтому и запустится первым. То есть, скрипты выполняются в порядке загрузки.

// Асинхронные скрипты очень полезны для добавления на страницу сторонних скриптов: счётчиков, рекламы и т.д. Они не зависят от наших скриптов, и мы тоже не должны ждать их:

// <!-- Типичное подключение скрипта Google Analytics -->
// <script async src="https://google-analytics.com/analytics.js"></script>





